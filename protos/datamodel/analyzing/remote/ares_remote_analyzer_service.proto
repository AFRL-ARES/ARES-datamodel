syntax = "proto3";

package ares.datamodel.analyzing.remote;

import "analyzing/analysis.proto";
import "ares_struct.proto";
import "google/protobuf/empty.proto";
import "analyzing/analyzer_capabilities.proto";
import "ares_data_schema.proto";
import "connection/connection_status.proto";
import "connection/connection_info.proto";
import "connection/connection_state.proto";

// defines a contract for ares to use in order to talk to a remote analyzer
// designed to be similar to the internal ARES analyzer implementation
service AresRemoteAnalyzerService {
	rpc Analyze(AnalysisRequest) returns (Analysis);
	rpc GetAnalyzerCapabilities(google.protobuf.Empty) returns (AnalyzerCapabilities);
	rpc ValidateInputs(ParameterValidationRequest) returns (ParameterValidationResult);
	rpc GetAnalysisParameters(google.protobuf.Empty) returns (AnalysisParametersResponse);

	rpc GetConnectionStatus(google.protobuf.Empty) returns (connection.ConnectionStatus);
	rpc GetState(google.protobuf.Empty) returns (connection.StateResponse);
	rpc GetInfo(google.protobuf.Empty) returns (connection.InfoResponse);
}

message ParameterValidationRequest {
	AresDataSchemaSimplified input_schema = 1;
}

message ParameterValidationResult {
  bool success = 1;
  repeated string messages = 2;
}

message AnalysisRequest {
	AresStruct inputs = 1;
	AresStruct settings = 2;
}

message AnalysisParametersResponse {
	AresDataSchema parameter_schema = 1;
}

