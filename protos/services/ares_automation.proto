syntax = "proto3";

package ares.services;

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "templates/campaign_template.proto";
import "project.proto";
import "execution_status_messages.proto";
import "execution_summary_messages.proto";
import "ares_campaign_tag.proto";

service AresAutomation {
	// Campaigns
	rpc GetAllCampaigns(GetAllCampaignsRequest) returns (CampaignsResponse);
	rpc GetSingleCampaign(CampaignRequest) returns (datamodel.templates.CampaignTemplate);
	rpc RemoveCampaign(CampaignRequest) returns (google.protobuf.Empty);
	rpc CampaignExists(CampaignRequest) returns (google.protobuf.BoolValue);
	rpc AddCampaign(AddOrUpdateCampaignRequest) returns (google.protobuf.Empty);
	rpc UpdateCampaign(AddOrUpdateCampaignRequest) returns (datamodel.templates.CampaignTemplate);
	rpc CheckExecutionEligibility(google.protobuf.Empty) returns (CheckExecutionEligibilityResponse);

	// Projects
	rpc GetAllProjects(google.protobuf.Empty) returns (ProjectsResponse); 
	rpc GetProject(ProjectRequest) returns (datamodel.Project);
	rpc RemoveProject(ProjectRequest) returns (google.protobuf.Empty);
	rpc AddProject(datamodel.Project) returns (google.protobuf.Empty);

	//Tags
	rpc GetAllTags(google.protobuf.Empty) returns (TagsResponse);
	rpc AddTag(TagRequest) returns (TagsResponse);
	rpc RemoveTag(TagRequest) returns (TagsResponse);

	// Execution
	rpc SetCampaignForExecution(CampaignRequest) returns (datamodel.templates.CampaignTemplate);
	rpc GetCurrentlySelectedCampaign(google.protobuf.Empty) returns (CampaignResponse);

	rpc StartExecution(StartCampaignRequest) returns (google.protobuf.Empty);
	rpc StopExecution(google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc PauseExecution(google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc ResumeExecution(google.protobuf.Empty) returns (google.protobuf.Empty);
	rpc GetAssignedStopConditions(google.protobuf.Empty) returns (StartStopConditionsResponse);
	rpc GetReplanRate(google.protobuf.Empty) returns (GetReplanRateResponse);
	rpc GetFailedStartConditions(google.protobuf.Empty) returns (StartStopConditionsResponse);
	rpc GetPreliminaryFailedStartConditions(datamodel.templates.CampaignTemplate) returns (StartStopConditionsResponse);
	rpc SetNumExperimentsStopCondition(NumExperimentsCondition) returns (google.protobuf.Empty);
	rpc SetReplanRate(ReplanRate) returns (google.protobuf.Empty);
	rpc SetAnalysisResultStopCondition(AnalysisResultCondition) returns (google.protobuf.Empty);
	rpc GetActiveStopCondition(google.protobuf.Empty) returns (ExperimentStopConditionResponse);
	rpc RemoveStopCondition(StartStopCondition) returns (google.protobuf.Empty);
	// Gets a stream of experiment execution statuses that can be observed in real time as experiment is running
	// Works best after grabbing all the execution statuses which then lets you know how many experiments have been run
	rpc GetExecutionStatusStream(google.protobuf.Empty) returns (stream datamodel.ExperimentExecutionStatus);
	rpc GetStartupExecutionStatusStream(google.protobuf.Empty) returns (stream datamodel.CampaignStartupStatus);
	rpc GetCloseoutExecutionStatusStream(google.protobuf.Empty) returns (stream datamodel.CampaignCloseoutStatus);
	// Gets the current status of a campaign execution assuming one is running
	rpc GetCampaignExecutionStatus(google.protobuf.Empty) returns (CampaignExecutionStatusResponse);
	rpc GetCampaignExecutionStateStream(google.protobuf.Empty) returns (stream datamodel.CampaignExecutionState);
	

	// Summaries
	rpc GetAvailableCampaignExecutionSummaries(google.protobuf.Empty) returns (AvailableCampaignExecutionSummariesResponse);
	rpc GetCampaignSummary(CampaignExecutionSummaryRequest) returns (datamodel.CampaignExecutionSummary);
}

message TagRequest {
	datamodel.AresCampaignTag tag = 1;
}

message TagsResponse {
	repeated datamodel.AresCampaignTag available_tags = 1;
}

message AddOrUpdateCampaignRequest {
	datamodel.templates.CampaignTemplate template = 1;
}

message RequestById {
	string unique_id = 1; // the unique id of a requested entity
}

message CampaignRequest {
	// provide either a name of unique id for the campaign
	oneof identifier {
		string campaign_name = 1; // name of the requested campaign template
		string unique_id = 2; // id of the requested template
	}
}

message GetAllCampaignsRequest {
	string file_path = 1;
}

message CampaignsResponse {
	repeated datamodel.templates.CampaignTemplate campaign_templates = 1; // list of campaign templates for a requested campaign name
}

message CampaignResponse {
	bool has_value = 1;
	datamodel.templates.CampaignTemplate value = 2;
}

message StartCampaignRequest {
	string user_notes = 1;
	repeated datamodel.AresCampaignTag campaign_tags = 2;
}

message ProjectRequest {
	string project_name = 1; // name of the requested project
}

message ProjectsResponse {
	repeated datamodel.Project projects = 1; // list of available projects
}

// separate response so that the status can be null
message CampaignExecutionStatusResponse {
	datamodel.CampaignExecutionStatus status = 1;
}

message StartStopConditionsResponse {
	repeated StartStopCondition start_stop_conditions = 1;
}

message GetReplanRateResponse {
	int32 ReplanRate = 1;
}

message StartStopCondition {
	string name = 1;
	string message = 2;
}

message ReplanRate {
	int32 ReplanRate = 1;
}

message NumExperimentsCondition {
	uint32 num_experiments = 1;
}

message ExperimentStopConditionResponse {
	string active_condition = 1;
	string description = 2;
}

message AnalysisResultCondition {
	double desired_result = 1;
	double leeway = 2;
}

message AvailableCampaignExecutionSummariesResponse {
	repeated CampaignExecutionSummaryMetadata available_campaign_summaries = 1;
}

message CampaignExecutionSummaryMetadata {
	string campaign_name = 1;
	google.protobuf.Timestamp completion_time = 2;
	string summary_id = 3;
	int64 num_experiments = 4;
}

message CampaignExecutionSummaryRequest {
	string summary_id = 1;
}

message CheckExecutionEligibilityResponse {
	bool is_eligible = 1;
	string error = 2;
}