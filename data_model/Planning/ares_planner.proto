syntax = "proto3";

import "google/protobuf/empty.proto";

package ares.messaging.planning;

service AresPlannerGrpc {
  rpc RequestCapabilities(google.protobuf.Empty) returns (Capabilities);
	rpc Plan(PlanRequest) returns (PlanResponse);
}

message Capabilities {
  string service_name = 1; // Name descriptor of the planner adapter service 
  int64 timeout_seconds = 2; // The timeout, in seconds, that ARES will wait to receive a response from the service
  repeated Planner available_planners = 3; // The planners this service is capable of utilizing
  repeated PlannerSetting adapter_settings = 4; // The settings associated with this adapter. Used to tell ARES what settings are available. Can be empty.
}

message Planner {
  string planner_name = 1; // Name descriptor of the planner
  string description = 2; // A brief description of this planner
  string version = 3; // Version descriptor of the planner
  string unique_id = 4;
}

message PlannerSetting {
  string setting_name = 1; // Name descriptor of the setting
  SettingValue setting_value = 2; // The value of this setting
  bool optional = 3; // Set based on whether this setting is optional or required
}

message SettingValue {
  oneof value_data {
    bool bool_value = 1;
    int32 int32_value = 2;
    int64 int64_value = 3;
    float float_value = 4;
    double double_value = 5;
    string string_value = 6;
    bytes bytes_value = 7;
  }
}

message PlanRequest {
  repeated PlanningParameter planning_parameters = 1; // The parameters ARES is requesting the service to plan for
}

message PlanResponse {
  repeated string parameter_names = 1;
  repeated float parameter_values = 2;
}

message PlanningParameter {
  string parameter_name = 1; // Name descriptor of the parameter
  double parameter_value = 2; // Value descriptor of the parameter
  double minimum_value = 3; // The minimum value that can be associated with the parameter
  double maximum_value = 4; // The maximum value that can be associated with the parameter
  double minimum_precision = 5; // The minimum precision associated with the parameter
  repeated double parameter_history = 6; // Previous values used for the parameter
  string data_type = 7; // The data type of the paramere
  Metadata metadata = 8; // Metadata associated with the parameter
  bool is_planned = 9; // Set based on whether the parameter should be planned for
  bool is_result = 10; // Set based on whether the parameter is designed as the result of the experiment
  string planner_name = 11; // The planner requested to plan for the parameter
}

message PlannedParameter {
  string parameter_name = 1; // Name descriptor of the parameter
  double parameter_value = 2; // Value of the planned parameter
  Metadata metadata = 3; // Metadata associated with the planned parameter
}

//This is sort of a place holder for now, until we (or atleast I) understand our needs better
message Metadata {
    string metadata_name = 1;
}